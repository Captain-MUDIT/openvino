name: Automate Good First Issues Board

on:
  issues:
    types: [opened, assigned, unassigned, closed]
  pull_request:
    types: [opened]

permissions:
  issues: write
  repository-projects: write

jobs:
  move-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Move issue between columns
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectNumber = 1;  // Change this to your actual project number
            const contributorsColumn = "Contributors needed";  
            const assignedColumn = "Assigned";  
            const reviewColumn = "In Review";  
            const closedColumn = "Closed";  

            const issue = context.payload.issue || context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function moveIssueToColumn(issue, columnName) {
              const projects = await github.rest.projects.listForRepo({ owner, repo });
              const project = projects.data.find(p => p.name === `Good First Issues`);
              if (!project) return;

              const columns = await github.rest.projects.listColumns({ project_id: project.id });
              const targetColumn = columns.data.find(c => c.name === columnName);
              if (!targetColumn) return;

              const cards = await github.rest.projects.listCards({ column_id: targetColumn.id });
              const existingCard = cards.data.find(c => c.content_url.endsWith(`/issues/${issue.number}`));

              if (!existingCard) {
                await github.rest.projects.createCard({
                  column_id: targetColumn.id,
                  content_id: issue.id,
                  content_type: "Issue"
                });
              } else {
                await github.rest.projects.moveCard({
                  card_id: existingCard.id,
                  position: "top",
                  column_id: targetColumn.id
                });
              }
            }

            if (github.event_name === "issues") {
              if (github.event.action === "opened") {
                await moveIssueToColumn(issue, contributorsColumn);
              } else if (github.event.action === "assigned") {
                await moveIssueToColumn(issue, assignedColumn);
              } else if (github.event.action === "unassigned") {
                await moveIssueToColumn(issue, contributorsColumn);
              } else if (github.event.action === "closed") {
                await moveIssueToColumn(issue, closedColumn);
              }
            } else if (github.event_name === "pull_request" && github.event.action === "opened") {
              await moveIssueToColumn(issue, reviewColumn);
            }
