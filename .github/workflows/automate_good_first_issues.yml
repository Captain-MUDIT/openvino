name: Automate Good First Issues Board

on:
  issues:
    types: [opened, assigned, unassigned, closed]
  issue_comment:
    types: [created]
  pull_request:
    types: [opened]

permissions:
  issues: write
  repository-projects: write

jobs:
  move-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Move issue between columns
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectName = "Good First Issues";  // Your Project Name
            const contributorsColumn = "Contributors needed";  
            const assignedColumn = "Assigned";  
            const reviewColumn = "In Review";  
            const closedColumn = "Closed";  

            const issue = context.payload.issue || context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function getProject() {
              const projects = await github.rest.projects.listForRepo({ owner, repo });
              return projects.data.find(p => p.name === projectName);
            }

            async function getColumnId(project, columnName) {
              const columns = await github.rest.projects.listColumns({ project_id: project.id });
              const column = columns.data.find(c => c.name === columnName);
              return column ? column.id : null;
            }

            async function getIssueCard(columnId, issueNumber) {
              const cards = await github.rest.projects.listCards({ column_id: columnId });
              return cards.data.find(c => c.content_url.endsWith(`/issues/${issueNumber}`));
            }

            async function moveIssueToColumn(issue, columnName) {
              const project = await getProject();
              if (!project) {
                console.log("Project not found.");
                return;
              }

              const columnId = await getColumnId(project, columnName);
              if (!columnId) {
                console.log(`Column "${columnName}" not found.`);
                return;
              }

              const existingCard = await getIssueCard(columnId, issue.number);
              if (!existingCard) {
                await github.rest.projects.createCard({
                  column_id: columnId,
                  content_id: issue.id,
                  content_type: "Issue"
                });
                console.log(`Issue #${issue.number} added to "${columnName}".`);
              } else {
                await github.rest.projects.moveCard({
                  card_id: existingCard.id,
                  position: "top",
                  column_id: columnId
                });
                console.log(`Issue #${issue.number} moved to "${columnName}".`);
              }
            }

            if (context.eventName === "issues") {
              if (context.payload.action === "opened") {
                await moveIssueToColumn(issue, contributorsColumn);
              } else if (context.payload.action === "assigned") {
                await moveIssueToColumn(issue, assignedColumn);
              } else if (context.payload.action === "unassigned") {
                await moveIssueToColumn(issue, contributorsColumn);
              } else if (context.payload.action === "closed") {
                await moveIssueToColumn(issue, closedColumn);
              }
            } else if (context.eventName === "issue_comment" && context.payload.comment.body.trim() === ".take") {
              await moveIssueToColumn(issue, assignedColumn);
            } else if (context.eventName === "pull_request" && context.payload.action === "opened") {
              await moveIssueToColumn(issue, reviewColumn);
            }
