name: Automate Good First Issues Board

on:
  issues:
    types: [opened, labeled, unlabeled, assigned, unassigned, closed, reopened]
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, closed]

permissions:
  issues: write
  repository-projects: write

jobs:
  move-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Move issue between columns
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.MY_PERSONAL_ACCESS_TOKEN }}
          script: |
            const CONFIG = {
              projectName: "Good First Issues",
              targetLabel: "good first issue",
              columns: {
                contributors: "Contributors needed",
                assigned: "Assigned",
                review: "In Review",
                closed: "Closed"
              },
              commands: {
                take: ".take",
                release: ".release"
              }
            };

            const issue = context.payload.issue || context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            function hasGoodFirstIssueLabel(issue) {
              return issue.labels && issue.labels.some(label => 
                label.name.toLowerCase() === CONFIG.targetLabel
              );
            }

            async function getProject() {
              try {
                const { data: projects } = await github.rest.projects.listForRepo({ owner, repo });
                const project = projects.find(p => p.name === CONFIG.projectName);
                if (!project) throw new Error(`Project "${CONFIG.projectName}" not found`);
                return project;
              } catch (error) {
                console.error(`Failed to get project: ${error.message}`);
                throw error;
              }
            }

            async function getColumnId(project, columnName) {
              try {
                const { data: columns } = await github.rest.projects.listColumns({ project_id: project.id });
                const column = columns.find(c => c.name === columnName);
                if (!column) throw new Error(`Column "${columnName}" not found`);
                return column.id;
              } catch (error) {
                console.error(`Failed to get column: ${error.message}`);
                throw error;
              }
            }

            async function getIssueCard(columnId, issueNumber) {
              try {
                const { data: cards } = await github.rest.projects.listCards({ column_id: columnId });
                return cards.find(c => c.content_url.endsWith(`/issues/${issueNumber}`));
              } catch (error) {
                console.error(`Failed to get issue card: ${error.message}`);
                throw error;
              }
            }

            async function moveIssueToColumn(issue, columnName) {
              if (!hasGoodFirstIssueLabel(issue)) {
                console.log(`Skipping issue #${issue.number} - no "good first issue" label`);
                return;
              }

              try {
                console.log(`Moving issue #${issue.number} to "${columnName}"`);
                
                const project = await getProject();
                const columnId = await getColumnId(project, columnName);
                const existingCard = await getIssueCard(columnId, issue.number);

                if (!existingCard) {
                  await github.rest.projects.createCard({
                    column_id: columnId,
                    content_id: issue.id,
                    content_type: "Issue"
                  });
                  console.log(`Created new card for issue #${issue.number} in "${columnName}"`);
                } else {
                  await github.rest.projects.moveCard({
                    card_id: existingCard.id,
                    position: "top",
                    column_id: columnId
                  });
                  console.log(`Moved existing card for issue #${issue.number} to "${columnName}"`);
                }
              } catch (error) {
                console.error(`Failed to move issue: ${error.message}`);
                throw error;
              }
            }

            async function handleIssueEvent() {
              const action = context.payload.action;
              console.log(`Processing issue event: ${action}`);

              // Handle label events
              if (action === 'labeled' && context.payload.label.name.toLowerCase() === CONFIG.targetLabel) {
                await moveIssueToColumn(issue, CONFIG.columns.contributors);
                return;
              }

              if (action === 'unlabeled' && context.payload.label.name.toLowerCase() === CONFIG.targetLabel) {
                // TODO: Remove from project board if needed
                return;
              }

              // Handle other issue events for labeled issues
              if (hasGoodFirstIssueLabel(issue)) {
                switch (action) {
                  case 'opened':
                  case 'reopened':
                    await moveIssueToColumn(issue, CONFIG.columns.contributors);
                    break;
                  case 'assigned':
                    await moveIssueToColumn(issue, CONFIG.columns.assigned);
                    break;
                  case 'unassigned':
                    await moveIssueToColumn(issue, CONFIG.columns.contributors);
                    break;
                  case 'closed':
                    await moveIssueToColumn(issue, CONFIG.columns.closed);
                    break;
                }
              }
            }

            async function handleCommentEvent() {
              if (!hasGoodFirstIssueLabel(issue)) return;

              const comment = context.payload.comment.body.trim();
              console.log(`Processing comment: "${comment}"`);

              if (comment === CONFIG.commands.take) {
                await moveIssueToColumn(issue, CONFIG.columns.assigned);
                await github.rest.issues.addAssignees({
                  owner,
                  repo,
                  issue_number: issue.number,
                  assignees: [context.payload.comment.user.login]
                });
              } else if (comment === CONFIG.commands.release) {
                await moveIssueToColumn(issue, CONFIG.columns.contributors);
                await github.rest.issues.removeAssignees({
                  owner,
                  repo,
                  issue_number: issue.number,
                  assignees: [context.payload.comment.user.login]
                });
              }
            }

            async function handlePullRequestEvent() {
              const action = context.payload.action;
              console.log(`Processing pull request event: ${action}`);

              // For PRs, we check if they reference an issue with the good first issue label
              try {
                const body = issue.body || '';
                const issueNumbers = body.match(/#(\d+)/g) || [];
                
                for (const numStr of issueNumbers) {
                  const num = parseInt(numStr.substring(1));
                  const { data: linkedIssue } = await github.rest.issues.get({
                    owner,
                    repo,
                    issue_number: num
                  });
                  
                  if (hasGoodFirstIssueLabel(linkedIssue)) {
                    if (action === 'opened') {
                      await moveIssueToColumn(linkedIssue, CONFIG.columns.review);
                    } else if (action === 'closed' && issue.merged) {
                      await moveIssueToColumn(linkedIssue, CONFIG.columns.closed);
                    }
                  }
                }
              } catch (error) {
                console.error('Error processing linked issues:', error);
              }
            }

            try {
              switch (context.eventName) {
                case 'issues':
                  await handleIssueEvent();
                  break;
                case 'issue_comment':
                  await handleCommentEvent();
                  break;
                case 'pull_request':
                  await handlePullRequestEvent();
                  break;
                default:
                  console.log(`Unhandled event type: ${context.eventName}`);
              }
            } catch (error) {
              console.error('Workflow failed:', error);
              throw error;
            }
